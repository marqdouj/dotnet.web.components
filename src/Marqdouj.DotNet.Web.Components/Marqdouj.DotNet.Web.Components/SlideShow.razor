@implements IAsyncDisposable
@inject IJSRuntime JS

<div class="slideshow-container" style="@imageStyle">

    <!-- Full-width images with number and caption text -->
    @for (var i = 1; i <= Images.Count; i++)
    {
        <div class="slides fade">
            <div class="number-text">@i / @Images.Count</div>
            <img src="@Images[i - 1].Source" style="@imageStyle">
            <div class="text">@Images[i - 1].Caption</div>
        </div>
    }

    <!-- Next and previous buttons -->
    <a class="prev" @onclick="@(() => PlusSlides(-1))">&#10094;</a>
    <a class="next" @onclick="@(() => PlusSlides(1))">&#10095;</a>
</div>
<br>

<!-- The dots/circles -->
<div style="text-align:center">
    @foreach (var item in Images)
    {
        <span class="dot" @onclick="@(() => CurrentSlide(item.Id))"></span>
    }
</div>

@code {
    [Parameter, EditorRequired]
    public List<SlideshowImage> Images { get; set; } = new();
    [Parameter]
    public bool AutoSlide { get; set; } = true;
    [Parameter]
    public int AutoSlideSeconds { get; set; } = 6;
    [Parameter]
    public int Width { get; set; } = 800;
    [Parameter]
    public int Height { get; set; } = 400;

    private SlideshowJs? module;
    private string imageStyle => $"width:{Width}px;height:{Height}px;";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module ??= new(JS);
            await module.Initialize();

            using var timer = new PeriodicTimer(TimeSpan.FromSeconds(AutoSlideSeconds));
            while (await timer.WaitForNextTickAsync())
            {
                if (AutoSlide)
                {
                    try
                    {
                        await module!.PlusSlides(1);
                    }
                    catch (JSDisconnectedException){}
                    catch (ObjectDisposedException){}
                    await InvokeAsync(StateHasChanged);
                }
            }
            // Make sure any subsequent logic is not called after the component is disposed
            return;
        }
    }

    public async Task PlusSlides(int direction)
    {
        AutoSlide = false;
        
        try
        {
            await module!.PlusSlides(direction);
        }
        catch (JSDisconnectedException) { }
        catch (ObjectDisposedException) { }
    }

    public async Task CurrentSlide(int index)
    {
        AutoSlide = false;
        
        try
        {
            await module!.CurrentSlide(index);
        }
        catch (JSDisconnectedException) { }
        catch (ObjectDisposedException) { }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        try
        {
            if (module != null)
                await module.DisposeAsync();
        }
        catch (JSDisconnectedException) { }
        catch (ObjectDisposedException) { }
    }
}
